/// <reference path="google-apps-script.types.d.ts" />
/// <reference path="google-apps-script.base.d.ts" />

declare module GoogleAppsScript {
  export module JDBC {
    /**
     * A JDBC Array. For documentation of this class, see java.sql.Array.
     */
    export interface JdbcArray {
      free(): void;
      getArray(): Object;
      getArray(index: Integer, count: Integer): Object;
      getBaseType(): Integer;
      getBaseTypeName(): String;
      getResultSet(): JdbcResultSet;
      getResultSet(index: Integer, count: Integer): JdbcResultSet;
    }

    /**
     * A JDBC CallableStatement. For documentation of this class, see
     *  java.sql.CallableStatement.
     * See also
     * 
     *  CallableStatement
     */
    export interface JdbcCallableStatement {
      addBatch(): void;
      addBatch(sql: String): void;
      cancel(): void;
      clearBatch(): void;
      clearParameters(): void;
      clearWarnings(): void;
      close(): void;
      execute(): Boolean;
      execute(sql: String): Boolean;
      execute(sql: String, autoGeneratedKeys: Integer, sql_: String, columnIndexes: Integer[]): Boolean;
      execute(sql: String, autoGeneratedKeys: Integer, sql_: String, columnIndexes: Integer[]): Boolean;
      execute(sql: String, columnNames: String[]): Boolean;
      executeBatch(): Integer[];
      executeQuery(): JdbcResultSet;
      executeQuery(sql: String): JdbcResultSet;
      executeUpdate(): Integer;
      executeUpdate(sql: String): Integer;
      executeUpdate(sql: String, autoGeneratedKeys: Integer, sql_: String, columnIndexes: Integer[]): Integer;
      executeUpdate(sql: String, autoGeneratedKeys: Integer, sql_: String, columnIndexes: Integer[]): Integer;
      executeUpdate(sql: String, columnNames: String[]): Integer;
      getArray(parameterIndex: Integer): JdbcArray;
      getArray(parameterName: String): JdbcArray;
      getBigDecimal(parameterIndex: Integer): BigNumber;
      getBigDecimal(parameterName: String): BigNumber;
      getBlob(parameterIndex: Integer): JdbcBlob;
      getBlob(parameterName: String): JdbcBlob;
      getBoolean(parameterIndex: Integer): Boolean;
      getBoolean(parameterName: String): Boolean;
      getByte(parameterIndex: Integer): Byte;
      getByte(parameterName: String): Byte;
      getBytes(parameterIndex: Integer): Byte[];
      getBytes(parameterName: String): Byte[];
      getClob(parameterIndex: Integer): JdbcClob;
      getClob(parameterName: String): JdbcClob;
      getConnection(): JdbcConnection;
      getDate(parameterIndex: Integer): JdbcDate;
      getDate(parameterIndex: Integer, timeZone: String): JdbcDate;
      getDate(parameterName: String): JdbcDate;
      getDate(parameterName: String, timeZone: String): JdbcDate;
      getDouble(parameterIndex: Integer): Number;
      getDouble(parameterName: String): Number;
      getFetchDirection(): Integer;
      getFetchSize(): Integer;
      getFloat(parameterIndex: Integer): Number;
      getFloat(parameterName: String): Number;
      getGeneratedKeys(): JdbcResultSet;
      getInt(parameterIndex: Integer): Integer;
      getInt(parameterName: String): Integer;
      getLong(parameterIndex: Integer): Integer;
      getLong(parameterName: String): Integer;
      getMaxFieldSize(): Integer;
      getMaxRows(): Integer;
      getMetaData(): JdbcResultSetMetaData;
      getMoreResults(): Boolean;
      getMoreResults(current: Integer): Boolean;
      getNClob(parameterIndex: Integer): JdbcClob;
      getNClob(parameterName: String): JdbcClob;
      getNString(parameterIndex: Integer): String;
      getNString(parameterName: String): String;
      getObject(parameterIndex: Integer): Object;
      getObject(parameterName: String): Object;
      getParameterMetaData(): JdbcParameterMetaData;
      getQueryTimeout(): Integer;
      getRef(parameterIndex: Integer): JdbcRef;
      getRef(parameterName: String): JdbcRef;
      getResultSet(): JdbcResultSet;
      getResultSetConcurrency(): Integer;
      getResultSetHoldability(): Integer;
      getResultSetType(): Integer;
      getRowId(parameterIndex: Integer): JdbcRowId;
      getRowId(parameterName: String): JdbcRowId;
      getSQLXML(parameterIndex: Integer): JdbcSQLXML;
      getSQLXML(parameterName: String): JdbcSQLXML;
      getShort(parameterIndex: Integer): Integer;
      getShort(parameterName: String): Integer;
      getString(parameterIndex: Integer): String;
      getString(parameterName: String): String;
      getTime(parameterIndex: Integer): JdbcTime;
      getTime(parameterIndex: Integer, timeZone: String): JdbcTime;
      getTime(parameterName: String): JdbcTime;
      getTime(parameterName: String, timeZone: String): JdbcTime;
      getTimestamp(parameterIndex: Integer): JdbcTimestamp;
      getTimestamp(parameterIndex: Integer, timeZone: String): JdbcTimestamp;
      getTimestamp(parameterName: String): JdbcTimestamp;
      getTimestamp(parameterName: String, timeZone: String): JdbcTimestamp;
      getURL(parameterIndex: Integer): String;
      getURL(parameterName: String): String;
      getUpdateCount(): Integer;
      getWarnings(): String[];
      isClosed(): Boolean;
      isPoolable(): Boolean;
      registerOutParameter(parameterIndex: Integer, sqlType: Integer): void;
      registerOutParameter(parameterIndex: Integer, sqlType: Integer, scale: Integer): void;
      registerOutParameter(parameterIndex: Integer, sqlType: Integer, typeName: String): void;
      registerOutParameter(parameterName: String, sqlType: Integer): void;
      registerOutParameter(parameterName: String, sqlType: Integer, scale: Integer): void;
      registerOutParameter(parameterName: String, sqlType: Integer, typeName: String): void;
      setArray(parameterIndex: Integer, x: JdbcArray): void;
      setBigDecimal(parameterIndex: Integer, x: BigNumber): void;
      setBigDecimal(parameterName: String, x: BigNumber): void;
      setBlob(parameterIndex: Integer, x: JdbcBlob): void;
      setBlob(parameterName: String, x: JdbcBlob): void;
      setBoolean(parameterIndex: Integer, x: Boolean): void;
      setBoolean(parameterName: String, x: Boolean): void;
      setByte(parameterIndex: Integer, x: Byte): void;
      setByte(parameterName: String, x: Byte): void;
      setBytes(parameterIndex: Integer, x: Byte[]): void;
      setBytes(parameterName: String, x: Byte[]): void;
      setClob(parameterIndex: Integer, x: JdbcClob): void;
      setClob(parameterName: String, x: JdbcClob): void;
      setCursorName(name: String): void;
      setDate(parameterIndex: Integer, x: JdbcDate): void;
      setDate(parameterIndex: Integer, x: JdbcDate, timeZone: String): void;
      setDate(parameterName: String, x: JdbcDate): void;
      setDate(parameterName: String, x: JdbcDate, timeZone: String): void;
      setDouble(parameterIndex: Integer, x: Number): void;
      setDouble(parameterName: String, x: Number): void;
      setEscapeProcessing(enable: Boolean): void;
      setFetchDirection(direction: Integer): void;
      setFetchSize(rows: Integer): void;
      setFloat(parameterIndex: Integer, x: Number): void;
      setFloat(parameterName: String, x: Number): void;
      setInt(parameterIndex: Integer, x: Integer): void;
      setInt(parameterName: String, x: Integer): void;
      setLong(parameterIndex: Integer, x: Integer): void;
      setLong(parameterName: String, x: Integer): void;
      setMaxFieldSize(max: Integer): void;
      setMaxRows(max: Integer): void;
      setNClob(parameterIndex: Integer, x: JdbcClob): void;
      setNClob(parameterName: String, value: JdbcClob): void;
      setNString(parameterIndex: Integer, x: String): void;
      setNString(parameterName: String, value: String): void;
      setNull(parameterIndex: Integer, sqlType: Integer): void;
      setNull(parameterIndex: Integer, sqlType: Integer, typeName: String): void;
      setNull(parameterName: String, sqlType: Integer): void;
      setNull(parameterName: String, sqlType: Integer, typeName: String): void;
      setObject(index: Integer, x: Object): void;
      setObject(parameterIndex: Integer, x: Object, targetSqlType: Integer): void;
      setObject(parameterIndex: Integer, x: Object, targetSqlType: Integer, scaleOrLength: Integer): void;
      setObject(parameterName: String, x: Object): void;
      setObject(parameterName: String, x: Object, targetSqlType: Integer): void;
      setObject(parameterName: String, x: Object, targetSqlType: Integer, scale: Integer): void;
      setPoolable(poolable: Boolean): void;
      setQueryTimeout(seconds: Integer): void;
      setRef(parameterIndex: Integer, x: JdbcRef): void;
      setRowId(parameterIndex: Integer, x: JdbcRowId): void;
      setRowId(parameterName: String, x: JdbcRowId): void;
      setSQLXML(parameterIndex: Integer, x: JdbcSQLXML): void;
      setSQLXML(parameterName: String, xmlObject: JdbcSQLXML): void;
      setShort(parameterIndex: Integer, x: Integer): void;
      setShort(parameterName: String, x: Integer): void;
      setString(parameterIndex: Integer, x: String): void;
      setString(parameterName: String, x: String): void;
      setTime(parameterIndex: Integer, x: JdbcTime): void;
      setTime(parameterIndex: Integer, x: JdbcTime, timeZone: String): void;
      setTime(parameterName: String, x: JdbcTime): void;
      setTime(parameterName: String, x: JdbcTime, timeZone: String): void;
      setTimestamp(parameterIndex: Integer, x: JdbcTimestamp): void;
      setTimestamp(parameterIndex: Integer, x: JdbcTimestamp, timeZone: String): void;
      setTimestamp(parameterName: String, x: JdbcTimestamp): void;
      setTimestamp(parameterName: String, x: JdbcTimestamp, timeZone: String): void;
      setURL(parameterIndex: Integer, x: String): void;
      setURL(parameterName: String, val: String): void;
      wasNull(): Boolean;
    }

    /**
     * A JDBC Blob. For documentation of this class, see java.sql.Blob.
     */
    export interface JdbcBlob {
      free(): void;
      getAppsScriptBlob(): Base.Blob;
      getAs(contentType: String): Base.Blob;
      getBytes(position: Integer, length: Integer): Byte[];
      length(): Integer;
      position(pattern: Byte[], start: Integer): Integer;
      position(pattern: JdbcBlob, start: Integer): Integer;
      setBytes(position: Integer, blobSource: Base.BlobSource): Integer;
      setBytes(position: Integer, blobSource: Base.BlobSource, offset: Integer, length: Integer): Integer;
      setBytes(position: Integer, bytes: Byte[]): Integer;
      setBytes(position: Integer, bytes: Byte[], offset: Integer, length: Integer): Integer;
      truncate(length: Integer): void;
    }

    /**
     * The JDBC service allows scripts to connect to Google Cloud SQL, MySQL,
     *  Microsoft SQL Server, and Oracle databases. For more information, see the
     *  guide to JDBC.
     */
    export interface Jdbc {
      getCloudSqlConnection(url: String): JdbcConnection;
      getCloudSqlConnection(url: String, info: Object): JdbcConnection;
      getCloudSqlConnection(url: String, userName: String, password: String): JdbcConnection;
      getConnection(url: String): JdbcConnection;
      getConnection(url: String, info: Object): JdbcConnection;
      getConnection(url: String, userName: String, password: String): JdbcConnection;
      newDate(milliseconds: Integer): JdbcDate;
      newTime(milliseconds: Integer): JdbcTime;
      newTimestamp(milliseconds: Integer): JdbcTimestamp;
      parseDate(date: String): JdbcDate;
      parseTime(time: String): JdbcTime;
      parseTimestamp(timestamp: String): JdbcTimestamp;
    }

    /**
     * A JDBC Connection. For documentation of this class, see java.sql.Connection.
     */
    export interface JdbcConnection {
      clearWarnings(): void;
      close(): void;
      commit(): void;
      createArrayOf(typeName: String, elements: Object[]): JdbcArray;
      createBlob(): JdbcBlob;
      createClob(): JdbcClob;
      createNClob(): JdbcClob;
      createSQLXML(): JdbcSQLXML;
      createStatement(): JdbcStatement;
      createStatement(resultSetType: Integer, resultSetConcurrency: Integer): JdbcStatement;
      createStatement(resultSetType: Integer, resultSetConcurrency: Integer, resultSetHoldability: Integer): JdbcStatement;
      createStruct(typeName: String, attributes: Object[]): JdbcStruct;
      getAutoCommit(): Boolean;
      getCatalog(): String;
      getHoldability(): Integer;
      getMetaData(): JdbcDatabaseMetaData;
      getTransactionIsolation(): Integer;
      getWarnings(): String[];
      isClosed(): Boolean;
      isReadOnly(): Boolean;
      isValid(timeout: Integer): Boolean;
      nativeSQL(sql: String): String;
      prepareCall(sql: String): JdbcCallableStatement;
      prepareCall(sql: String, resultSetType: Integer, resultSetConcurrency: Integer): JdbcCallableStatement;
      prepareCall(sql: String, resultSetType: Integer, resultSetConcurrency: Integer, resultSetHoldability: Integer): JdbcCallableStatement;
      prepareStatement(sql: String): JdbcPreparedStatement;
      prepareStatement(sql: String, autoGeneratedKeys: Integer): JdbcPreparedStatement;
      prepareStatement(sql: String, resultSetType: Integer, resultSetConcurrency: Integer): JdbcPreparedStatement;
      prepareStatement(sql: String, resultSetType: Integer, resultSetConcurrency: Integer, resultSetHoldability: Integer): JdbcPreparedStatement;
      prepareStatementByIndex(sql: String, indices: Integer[]): JdbcPreparedStatement;
      prepareStatementByName(sql: String, columnNames: String[]): JdbcPreparedStatement;
      releaseSavepoint(savepoint: JdbcSavepoint): void;
      rollback(): void;
      rollback(savepoint: JdbcSavepoint): void;
      setAutoCommit(autoCommit: Boolean): void;
      setCatalog(catalog: String): void;
      setHoldability(holdability: Integer): void;
      setReadOnly(readOnly: Boolean): void;
      setSavepoint(): JdbcSavepoint;
      setSavepoint(name: String): JdbcSavepoint;
      setTransactionIsolation(level: Integer): void;
    }

    /**
     * A JDBC Clob. For documentation of this class, see java.sql.Clob.
     */
    export interface JdbcClob {
      free(): void;
      getAppsScriptBlob(): Base.Blob;
      getAs(contentType: String): Base.Blob;
      getSubString(position: Integer, length: Integer): String;
      length(): Integer;
      position(search: JdbcClob, start: Integer): Integer;
      position(search: String, start: Integer): Integer;
      setString(position: Integer, blobSource: Base.BlobSource): Integer;
      setString(position: Integer, blobSource: Base.BlobSource, offset: Integer, len: Integer): Integer;
      setString(position: Integer, value: String): Integer;
      setString(position: Integer, value: String, offset: Integer, len: Integer): Integer;
      truncate(length: Integer): void;
    }

    /**
     * A JDBC Date. For documentation of this class, see java.sql.Date.
     */
    export interface JdbcDate {
      after(when: JdbcDate): Boolean;
      before(when: JdbcDate): Boolean;
      getDate(): Integer;
      getMonth(): Integer;
      getTime(): Integer;
      getYear(): Integer;
      setDate(date: Integer): void;
      setMonth(month: Integer): void;
      setTime(milliseconds: Integer): void;
      setYear(year: Integer): void;
    }

    /**
     * A JDBC DatabaseMetaData. For documentation of this class, see
     *  java.sql.DatabaseMetaData.
     */
    export interface JdbcDatabaseMetaData {
      allProceduresAreCallable(): Boolean;
      allTablesAreSelectable(): Boolean;
      autoCommitFailureClosesAllResultSets(): Boolean;
      dataDefinitionCausesTransactionCommit(): Boolean;
      dataDefinitionIgnoredInTransactions(): Boolean;
      deletesAreDetected(type: Integer): Boolean;
      doesMaxRowSizeIncludeBlobs(): Boolean;
      getAttributes(catalog: String, schemaPattern: String, typeNamePattern: String, attributeNamePattern: String): JdbcResultSet;
      getBestRowIdentifier(catalog: String, schema: String, table: String, scope: Integer, nullable: Boolean): JdbcResultSet;
      getCatalogSeparator(): String;
      getCatalogTerm(): String;
      getCatalogs(): JdbcResultSet;
      getClientInfoProperties(): JdbcResultSet;
      getColumnPrivileges(catalog: String, schema: String, table: String, columnNamePattern: String): JdbcResultSet;
      getColumns(catalog: String, schemaPattern: String, tableNamePattern: String, columnNamePattern: String): JdbcResultSet;
      getConnection(): JdbcConnection;
      getCrossReference(parentCatalog: String, parentSchema: String, parentTable: String, foreignCatalog: String, foreignSchema: String, foreignTable: String): JdbcResultSet;
      getDatabaseMajorVersion(): Integer;
      getDatabaseMinorVersion(): Integer;
      getDatabaseProductName(): String;
      getDatabaseProductVersion(): String;
      getDefaultTransactionIsolation(): Integer;
      getDriverMajorVersion(): Integer;
      getDriverMinorVersion(): Integer;
      getDriverName(): String;
      getDriverVersion(): String;
      getExportedKeys(catalog: String, schema: String, table: String): JdbcResultSet;
      getExtraNameCharacters(): String;
      getFunctionColumns(catalog: String, schemaPattern: String, functionNamePattern: String, columnNamePattern: String): JdbcResultSet;
      getFunctions(catalog: String, schemaPattern: String, functionNamePattern: String): JdbcResultSet;
      getIdentifierQuoteString(): String;
      getImportedKeys(catalog: String, schema: String, table: String): JdbcResultSet;
      getIndexInfo(catalog: String, schema: String, table: String, unique: Boolean, approximate: Boolean): JdbcResultSet;
      getJDBCMajorVersion(): Integer;
      getJDBCMinorVersion(): Integer;
      getMaxBinaryLiteralLength(): Integer;
      getMaxCatalogNameLength(): Integer;
      getMaxCharLiteralLength(): Integer;
      getMaxColumnNameLength(): Integer;
      getMaxColumnsInGroupBy(): Integer;
      getMaxColumnsInIndex(): Integer;
      getMaxColumnsInOrderBy(): Integer;
      getMaxColumnsInSelect(): Integer;
      getMaxColumnsInTable(): Integer;
      getMaxConnections(): Integer;
      getMaxCursorNameLength(): Integer;
      getMaxIndexLength(): Integer;
      getMaxProcedureNameLength(): Integer;
      getMaxRowSize(): Integer;
      getMaxSchemaNameLength(): Integer;
      getMaxStatementLength(): Integer;
      getMaxStatements(): Integer;
      getMaxTableNameLength(): Integer;
      getMaxTablesInSelect(): Integer;
      getMaxUserNameLength(): Integer;
      getNumericFunctions(): String;
      getPrimaryKeys(catalog: String, schema: String, table: String): JdbcResultSet;
      getProcedureColumns(catalog: String, schemaPattern: String, procedureNamePattern: String, columnNamePattern: String): JdbcResultSet;
      getProcedureTerm(): String;
      getProcedures(catalog: String, schemaPattern: String, procedureNamePattern: String): JdbcResultSet;
      getResultSetHoldability(): Integer;
      getRowIdLifetime(): Integer;
      getSQLKeywords(): String;
      getSQLStateType(): Integer;
      getSchemaTerm(): String;
      getSchemas(): JdbcResultSet;
      getSchemas(catalog: String, schemaPattern: String): JdbcResultSet;
      getSearchStringEscape(): String;
      getStringFunctions(): String;
      getSuperTables(catalog: String, schemaPattern: String, tableNamePattern: String): JdbcResultSet;
      getSuperTypes(catalog: String, schemaPattern: String, typeNamePattern: String): JdbcResultSet;
      getSystemFunctions(): String;
      getTablePrivileges(catalog: String, schemaPattern: String, tableNamePattern: String): JdbcResultSet;
      getTableTypes(): JdbcResultSet;
      getTables(catalog: String, schemaPattern: String, tableNamePattern: String, types: String[]): JdbcResultSet;
      getTimeDateFunctions(): String;
      getTypeInfo(): JdbcResultSet;
      getUDTs(catalog: String, schemaPattern: String, typeNamePattern: String, types: Integer[]): JdbcResultSet;
      getURL(): String;
      getUserName(): String;
      getVersionColumns(catalog: String, schema: String, table: String): JdbcResultSet;
      insertsAreDetected(type: Integer): Boolean;
      isCatalogAtStart(): Boolean;
      isReadOnly(): Boolean;
      locatorsUpdateCopy(): Boolean;
      nullPlusNonNullIsNull(): Boolean;
      nullsAreSortedAtEnd(): Boolean;
      nullsAreSortedAtStart(): Boolean;
      nullsAreSortedHigh(): Boolean;
      nullsAreSortedLow(): Boolean;
      othersDeletesAreVisible(type: Integer): Boolean;
      othersInsertsAreVisible(type: Integer): Boolean;
      othersUpdatesAreVisible(type: Integer): Boolean;
      ownDeletesAreVisible(type: Integer): Boolean;
      ownInsertsAreVisible(type: Integer): Boolean;
      ownUpdatesAreVisible(type: Integer): Boolean;
      storesLowerCaseIdentifiers(): Boolean;
      storesLowerCaseQuotedIdentifiers(): Boolean;
      storesMixedCaseIdentifiers(): Boolean;
      storesMixedCaseQuotedIdentifiers(): Boolean;
      storesUpperCaseIdentifiers(): Boolean;
      storesUpperCaseQuotedIdentifiers(): Boolean;
      supportsANSI92EntryLevelSQL(): Boolean;
      supportsANSI92FullSQL(): Boolean;
      supportsANSI92IntermediateSQL(): Boolean;
      supportsAlterTableWithAddColumn(): Boolean;
      supportsAlterTableWithDropColumn(): Boolean;
      supportsBatchUpdates(): Boolean;
      supportsCatalogsInDataManipulation(): Boolean;
      supportsCatalogsInIndexDefinitions(): Boolean;
      supportsCatalogsInPrivilegeDefinitions(): Boolean;
      supportsCatalogsInProcedureCalls(): Boolean;
      supportsCatalogsInTableDefinitions(): Boolean;
      supportsColumnAliasing(): Boolean;
      supportsConvert(): Boolean;
      supportsConvert(fromType: Integer, toType: Integer): Boolean;
      supportsCoreSQLGrammar(): Boolean;
      supportsCorrelatedSubqueries(): Boolean;
      supportsDataDefinitionAndDataManipulationTransactions(): Boolean;
      supportsDataManipulationTransactionsOnly(): Boolean;
      supportsDifferentTableCorrelationNames(): Boolean;
      supportsExpressionsInOrderBy(): Boolean;
      supportsExtendedSQLGrammar(): Boolean;
      supportsFullOuterJoins(): Boolean;
      supportsGetGeneratedKeys(): Boolean;
      supportsGroupBy(): Boolean;
      supportsGroupByBeyondSelect(): Boolean;
      supportsGroupByUnrelated(): Boolean;
      supportsIntegrityEnhancementFacility(): Boolean;
      supportsLikeEscapeClause(): Boolean;
      supportsLimitedOuterJoins(): Boolean;
      supportsMinimumSQLGrammar(): Boolean;
      supportsMixedCaseIdentifiers(): Boolean;
      supportsMixedCaseQuotedIdentifiers(): Boolean;
      supportsMultipleOpenResults(): Boolean;
      supportsMultipleResultSets(): Boolean;
      supportsMultipleTransactions(): Boolean;
      supportsNamedParameters(): Boolean;
      supportsNonNullableColumns(): Boolean;
      supportsOpenCursorsAcrossCommit(): Boolean;
      supportsOpenCursorsAcrossRollback(): Boolean;
      supportsOpenStatementsAcrossCommit(): Boolean;
      supportsOpenStatementsAcrossRollback(): Boolean;
      supportsOrderByUnrelated(): Boolean;
      supportsOuterJoins(): Boolean;
      supportsPositionedDelete(): Boolean;
      supportsPositionedUpdate(): Boolean;
      supportsResultSetConcurrency(type: Integer, concurrency: Integer): Boolean;
      supportsResultSetHoldability(holdability: Integer): Boolean;
      supportsResultSetType(type: Integer): Boolean;
      supportsSavepoints(): Boolean;
      supportsSchemasInDataManipulation(): Boolean;
      supportsSchemasInIndexDefinitions(): Boolean;
      supportsSchemasInPrivilegeDefinitions(): Boolean;
      supportsSchemasInProcedureCalls(): Boolean;
      supportsSchemasInTableDefinitions(): Boolean;
      supportsSelectForUpdate(): Boolean;
      supportsStatementPooling(): Boolean;
      supportsStoredFunctionsUsingCallSyntax(): Boolean;
      supportsStoredProcedures(): Boolean;
      supportsSubqueriesInComparisons(): Boolean;
      supportsSubqueriesInExists(): Boolean;
      supportsSubqueriesInIns(): Boolean;
      supportsSubqueriesInQuantifieds(): Boolean;
      supportsTableCorrelationNames(): Boolean;
      supportsTransactionIsolationLevel(level: Integer): Boolean;
      supportsTransactions(): Boolean;
      supportsUnion(): Boolean;
      supportsUnionAll(): Boolean;
      updatesAreDetected(type: Integer): Boolean;
      usesLocalFilePerTable(): Boolean;
      usesLocalFiles(): Boolean;
    }

    /**
     * A JDBC Ref. For documentation of this class, see java.sql.Ref.
     */
    export interface JdbcRef {
      getBaseTypeName(): String;
      getObject(): Object;
      setObject(object: Object): void;
    }

    /**
     * A JDBC ResultSet. For documentation of this class, see java.sql.ResultSet.
     */
    export interface JdbcResultSet {
      absolute(row: Integer): Boolean;
      afterLast(): void;
      beforeFirst(): void;
      cancelRowUpdates(): void;
      clearWarnings(): void;
      close(): void;
      deleteRow(): void;
      findColumn(columnLabel: String): Integer;
      first(): Boolean;
      getArray(columnIndex: Integer): JdbcArray;
      getArray(columnLabel: String): JdbcArray;
      getBigDecimal(columnIndex: Integer): BigNumber;
      getBigDecimal(columnLabel: String): BigNumber;
      getBlob(columnIndex: Integer): JdbcBlob;
      getBlob(columnLabel: String): JdbcBlob;
      getBoolean(columnIndex: Integer): Boolean;
      getBoolean(columnLabel: String): Boolean;
      getByte(columnIndex: Integer): Byte;
      getByte(columnLabel: String): Byte;
      getBytes(columnIndex: Integer): Byte[];
      getBytes(columnLabel: String): Byte[];
      getClob(columnIndex: Integer): JdbcClob;
      getClob(columnLabel: String): JdbcClob;
      getConcurrency(): Integer;
      getCursorName(): String;
      getDate(columnIndex: Integer): JdbcDate;
      getDate(columnIndex: Integer, timeZone: String): JdbcDate;
      getDate(columnLabel: String): JdbcDate;
      getDate(columnLabel: String, timeZone: String): JdbcDate;
      getDouble(columnIndex: Integer): Number;
      getDouble(columnLabel: String): Number;
      getFetchDirection(): Integer;
      getFetchSize(): Integer;
      getFloat(columnIndex: Integer): Number;
      getFloat(columnLabel: String): Number;
      getHoldability(): Integer;
      getInt(columnIndex: Integer): Integer;
      getInt(columnLabel: String): Integer;
      getLong(columnIndex: Integer): Integer;
      getLong(columnLabel: String): Integer;
      getMetaData(): JdbcResultSetMetaData;
      getNClob(columnIndex: Integer): JdbcClob;
      getNClob(columnLabel: String): JdbcClob;
      getNString(columnIndex: Integer): String;
      getNString(columnLabel: String): String;
      getObject(columnIndex: Integer): Object;
      getObject(columnLabel: String): Object;
      getRef(columnIndex: Integer): JdbcRef;
      getRef(columnLabel: String): JdbcRef;
      getRow(): Integer;
      getRowId(columnIndex: Integer): JdbcRowId;
      getRowId(columnLabel: String): JdbcRowId;
      getSQLXML(columnIndex: Integer): JdbcSQLXML;
      getSQLXML(columnLabel: String): JdbcSQLXML;
      getShort(columnIndex: Integer): Integer;
      getShort(columnLabel: String): Integer;
      getStatement(): JdbcStatement;
      getString(columnIndex: Integer): String;
      getString(columnLabel: String): String;
      getTime(columnIndex: Integer): JdbcTime;
      getTime(columnIndex: Integer, timeZone: String): JdbcTime;
      getTime(columnLabel: String): JdbcTime;
      getTime(columnLabel: String, timeZone: String): JdbcTime;
      getTimestamp(columnIndex: Integer): JdbcTimestamp;
      getTimestamp(columnIndex: Integer, timeZone: String): JdbcTimestamp;
      getTimestamp(columnLabel: String): JdbcTimestamp;
      getTimestamp(columnLabel: String, timeZone: String): JdbcTimestamp;
      getType(): Integer;
      getURL(columnIndex: Integer): String;
      getURL(columnLabel: String): String;
      getWarnings(): String[];
      insertRow(): void;
      isAfterLast(): Boolean;
      isBeforeFirst(): Boolean;
      isClosed(): Boolean;
      isFirst(): Boolean;
      isLast(): Boolean;
      last(): Boolean;
      moveToCurrentRow(): void;
      moveToInsertRow(): void;
      next(): Boolean;
      previous(): Boolean;
      refreshRow(): void;
      relative(rows: Integer): Boolean;
      rowDeleted(): Boolean;
      rowInserted(): Boolean;
      rowUpdated(): Boolean;
      setFetchDirection(direction: Integer): void;
      setFetchSize(rows: Integer): void;
      updateArray(columnIndex: Integer, x: JdbcArray): void;
      updateArray(columnLabel: String, x: JdbcArray): void;
      updateBigDecimal(columnIndex: Integer, x: BigNumber): void;
      updateBigDecimal(columnLabel: String, x: BigNumber): void;
      updateBlob(columnIndex: Integer, x: JdbcBlob): void;
      updateBlob(columnLabel: String, x: JdbcBlob): void;
      updateBoolean(columnIndex: Integer, x: Boolean): void;
      updateBoolean(columnLabel: String, x: Boolean): void;
      updateByte(columnIndex: Integer, x: Byte): void;
      updateByte(columnLabel: String, x: Byte): void;
      updateBytes(columnIndex: Integer, x: Byte[]): void;
      updateBytes(columnLabel: String, x: Byte[]): void;
      updateClob(columnIndex: Integer, x: JdbcClob): void;
      updateClob(columnLabel: String, x: JdbcClob): void;
      updateDate(columnIndex: Integer, x: JdbcDate): void;
      updateDate(columnLabel: String, x: JdbcDate): void;
      updateDouble(columnIndex: Integer, x: Number): void;
      updateDouble(columnLabel: String, x: Number): void;
      updateFloat(columnIndex: Integer, x: Number): void;
      updateFloat(columnLabel: String, x: Number): void;
      updateInt(columnIndex: Integer, x: Integer): void;
      updateInt(columnLabel: String, x: Integer): void;
      updateLong(columnIndex: Integer, x: Integer): void;
      updateLong(columnLabel: String, x: Integer): void;
      updateNClob(columnIndex: Integer, x: JdbcClob): void;
      updateNClob(columnLabel: String, x: JdbcClob): void;
      updateNString(columnIndex: Integer, x: String): void;
      updateNString(columnLabel: String, x: String): void;
      updateNull(columnIndex: Integer): void;
      updateNull(columnLabel: String): void;
      updateObject(columnIndex: Integer, x: Object): void;
      updateObject(columnIndex: Integer, x: Object, scaleOrLength: Integer): void;
      updateObject(columnLabel: String, x: Object): void;
      updateObject(columnLabel: String, x: Object, scaleOrLength: Integer): void;
      updateRef(columnIndex: Integer, x: JdbcRef): void;
      updateRef(columnLabel: String, x: JdbcRef): void;
      updateRow(): void;
      updateRowId(columnIndex: Integer, x: JdbcRowId): void;
      updateRowId(columnLabel: String, x: JdbcRowId): void;
      updateSQLXML(columnIndex: Integer, x: JdbcSQLXML): void;
      updateSQLXML(columnLabel: String, x: JdbcSQLXML): void;
      updateShort(columnIndex: Integer, x: Integer): void;
      updateShort(columnLabel: String, x: Integer): void;
      updateString(columnIndex: Integer, x: String): void;
      updateString(columnLabel: String, x: String): void;
      updateTime(columnIndex: Integer, x: JdbcTime): void;
      updateTime(columnLabel: String, x: JdbcTime): void;
      updateTimestamp(columnIndex: Integer, x: JdbcTimestamp): void;
      updateTimestamp(columnLabel: String, x: JdbcTimestamp): void;
      wasNull(): Boolean;
    }

    /**
     * A JDBC PreparedStatement. For documentation of this class, see
     *  java.sql.PreparedStatement.
     */
    export interface JdbcPreparedStatement {
      addBatch(): void;
      addBatch(sql: String): void;
      cancel(): void;
      clearBatch(): void;
      clearParameters(): void;
      clearWarnings(): void;
      close(): void;
      execute(): Boolean;
      execute(sql: String): Boolean;
      execute(sql: String, autoGeneratedKeys: Integer, sql_: String, columnIndexes: Integer[]): Boolean;
      execute(sql: String, autoGeneratedKeys: Integer, sql_: String, columnIndexes: Integer[]): Boolean;
      execute(sql: String, columnNames: String[]): Boolean;
      executeBatch(): Integer[];
      executeQuery(): JdbcResultSet;
      executeQuery(sql: String): JdbcResultSet;
      executeUpdate(): Integer;
      executeUpdate(sql: String): Integer;
      executeUpdate(sql: String, autoGeneratedKeys: Integer, sql_: String, columnIndexes: Integer[]): Integer;
      executeUpdate(sql: String, autoGeneratedKeys: Integer, sql_: String, columnIndexes: Integer[]): Integer;
      executeUpdate(sql: String, columnNames: String[]): Integer;
      getConnection(): JdbcConnection;
      getFetchDirection(): Integer;
      getFetchSize(): Integer;
      getGeneratedKeys(): JdbcResultSet;
      getMaxFieldSize(): Integer;
      getMaxRows(): Integer;
      getMetaData(): JdbcResultSetMetaData;
      getMoreResults(): Boolean;
      getMoreResults(current: Integer): Boolean;
      getParameterMetaData(): JdbcParameterMetaData;
      getQueryTimeout(): Integer;
      getResultSet(): JdbcResultSet;
      getResultSetConcurrency(): Integer;
      getResultSetHoldability(): Integer;
      getResultSetType(): Integer;
      getUpdateCount(): Integer;
      getWarnings(): String[];
      isClosed(): Boolean;
      isPoolable(): Boolean;
      setArray(parameterIndex: Integer, x: JdbcArray): void;
      setBigDecimal(parameterIndex: Integer, x: BigNumber): void;
      setBlob(parameterIndex: Integer, x: JdbcBlob): void;
      setBoolean(parameterIndex: Integer, x: Boolean): void;
      setByte(parameterIndex: Integer, x: Byte): void;
      setBytes(parameterIndex: Integer, x: Byte[]): void;
      setClob(parameterIndex: Integer, x: JdbcClob): void;
      setCursorName(name: String): void;
      setDate(parameterIndex: Integer, x: JdbcDate): void;
      setDate(parameterIndex: Integer, x: JdbcDate, timeZone: String): void;
      setDouble(parameterIndex: Integer, x: Number): void;
      setEscapeProcessing(enable: Boolean): void;
      setFetchDirection(direction: Integer): void;
      setFetchSize(rows: Integer): void;
      setFloat(parameterIndex: Integer, x: Number): void;
      setInt(parameterIndex: Integer, x: Integer): void;
      setLong(parameterIndex: Integer, x: Integer): void;
      setMaxFieldSize(max: Integer): void;
      setMaxRows(max: Integer): void;
      setNClob(parameterIndex: Integer, x: JdbcClob): void;
      setNString(parameterIndex: Integer, x: String): void;
      setNull(parameterIndex: Integer, sqlType: Integer): void;
      setNull(parameterIndex: Integer, sqlType: Integer, typeName: String): void;
      setObject(index: Integer, x: Object): void;
      setObject(parameterIndex: Integer, x: Object, targetSqlType: Integer): void;
      setObject(parameterIndex: Integer, x: Object, targetSqlType: Integer, scaleOrLength: Integer): void;
      setPoolable(poolable: Boolean): void;
      setQueryTimeout(seconds: Integer): void;
      setRef(parameterIndex: Integer, x: JdbcRef): void;
      setRowId(parameterIndex: Integer, x: JdbcRowId): void;
      setSQLXML(parameterIndex: Integer, x: JdbcSQLXML): void;
      setShort(parameterIndex: Integer, x: Integer): void;
      setString(parameterIndex: Integer, x: String): void;
      setTime(parameterIndex: Integer, x: JdbcTime): void;
      setTime(parameterIndex: Integer, x: JdbcTime, timeZone: String): void;
      setTimestamp(parameterIndex: Integer, x: JdbcTimestamp): void;
      setTimestamp(parameterIndex: Integer, x: JdbcTimestamp, timeZone: String): void;
      setURL(parameterIndex: Integer, x: String): void;
    }

    /**
     * A JDBC ParameterMetaData. For documentation of this class, see
     *  java.sql.ParameterMetaData.
     */
    export interface JdbcParameterMetaData {
      getParameterClassName(param: Integer): String;
      getParameterCount(): Integer;
      getParameterMode(param: Integer): Integer;
      getParameterType(param: Integer): Integer;
      getParameterTypeName(param: Integer): String;
      getPrecision(param: Integer): Integer;
      getScale(param: Integer): Integer;
      isNullable(param: Integer): Integer;
      isSigned(param: Integer): Boolean;
    }

    /**
     * A JDBC SQLXML. For documentation of this class, see java.sql.SQLXML.
     */
    export interface JdbcSQLXML {
      free(): void;
      getString(): String;
      setString(value: String): void;
    }

    /**
     * A JDBC RowId. For documentation of this class, see java.sql.RowId.
     */
    export interface JdbcRowId {
      getBytes(): Byte[];
    }

    /**
     * A JDBC Savepoint. For documentation of this class, see java.sql.Savepoint.
     * See also
     * 
     * Savepoint
     */
    export interface JdbcSavepoint {
      getSavepointId(): Integer;
      getSavepointName(): String;
    }

    /**
     * A JDBC ResultSetMetaData. For documentation of this class, see
     *  java.sql.ResultSetMetaData.
     */
    export interface JdbcResultSetMetaData {
      getCatalogName(column: Integer): String;
      getColumnClassName(column: Integer): String;
      getColumnCount(): Integer;
      getColumnDisplaySize(column: Integer): Integer;
      getColumnLabel(column: Integer): String;
      getColumnName(column: Integer): String;
      getColumnType(column: Integer): Integer;
      getColumnTypeName(column: Integer): String;
      getPrecision(column: Integer): Integer;
      getScale(column: Integer): Integer;
      getSchemaName(column: Integer): String;
      getTableName(column: Integer): String;
      isAutoIncrement(column: Integer): Boolean;
      isCaseSensitive(column: Integer): Boolean;
      isCurrency(column: Integer): Boolean;
      isDefinitelyWritable(column: Integer): Boolean;
      isNullable(column: Integer): Integer;
      isReadOnly(column: Integer): Boolean;
      isSearchable(column: Integer): Boolean;
      isSigned(column: Integer): Boolean;
      isWritable(column: Integer): Boolean;
    }

    /**
     * A JDBC Struct. For documentation of this class, see java.sql.Struct.
     */
    export interface JdbcStruct {
      getAttributes(): Object[];
      getSQLTypeName(): String;
    }

    /**
     * A JDBC Time. For documentation of this class, see java.sql.Time.
     */
    export interface JdbcTime {
      after(when: JdbcTime): Boolean;
      before(when: JdbcTime): Boolean;
      getHours(): Integer;
      getMinutes(): Integer;
      getSeconds(): Integer;
      getTime(): Integer;
      setHours(hours: Integer): void;
      setMinutes(minutes: Integer): void;
      setSeconds(seconds: Integer): void;
      setTime(milliseconds: Integer): void;
    }

    /**
     * A JDBC Timestamp. For documentation of this class, see java.sql.Timestamp.
     */
    export interface JdbcTimestamp {
      after(when: JdbcTimestamp): Boolean;
      before(when: JdbcTimestamp): Boolean;
      getDate(): Integer;
      getHours(): Integer;
      getMinutes(): Integer;
      getMonth(): Integer;
      getNanos(): Integer;
      getSeconds(): Integer;
      getTime(): Integer;
      getYear(): Integer;
      setDate(date: Integer): void;
      setHours(hours: Integer): void;
      setMinutes(minutes: Integer): void;
      setMonth(month: Integer): void;
      setNanos(nanoseconds: Integer): void;
      setSeconds(seconds: Integer): void;
      setTime(milliseconds: Integer): void;
      setYear(year: Integer): void;
    }

    /**
     * A JDBC Statement. For documentation of this class, see java.sql.Statement.
     */
    export interface JdbcStatement {
      addBatch(sql: String): void;
      cancel(): void;
      clearBatch(): void;
      clearWarnings(): void;
      close(): void;
      execute(sql: String): Boolean;
      execute(sql: String, autoGeneratedKeys: Integer, sql_: String, columnIndexes: Integer[]): Boolean;
      execute(sql: String, autoGeneratedKeys: Integer, sql_: String, columnIndexes: Integer[]): Boolean;
      execute(sql: String, columnNames: String[]): Boolean;
      executeBatch(): Integer[];
      executeQuery(sql: String): JdbcResultSet;
      executeUpdate(sql: String): Integer;
      executeUpdate(sql: String, autoGeneratedKeys: Integer, sql_: String, columnIndexes: Integer[]): Integer;
      executeUpdate(sql: String, autoGeneratedKeys: Integer, sql_: String, columnIndexes: Integer[]): Integer;
      executeUpdate(sql: String, columnNames: String[]): Integer;
      getConnection(): JdbcConnection;
      getFetchDirection(): Integer;
      getFetchSize(): Integer;
      getGeneratedKeys(): JdbcResultSet;
      getMaxFieldSize(): Integer;
      getMaxRows(): Integer;
      getMoreResults(): Boolean;
      getMoreResults(current: Integer): Boolean;
      getQueryTimeout(): Integer;
      getResultSet(): JdbcResultSet;
      getResultSetConcurrency(): Integer;
      getResultSetHoldability(): Integer;
      getResultSetType(): Integer;
      getUpdateCount(): Integer;
      getWarnings(): String[];
      isClosed(): Boolean;
      isPoolable(): Boolean;
      setCursorName(name: String): void;
      setEscapeProcessing(enable: Boolean): void;
      setFetchDirection(direction: Integer): void;
      setFetchSize(rows: Integer): void;
      setMaxFieldSize(max: Integer): void;
      setMaxRows(max: Integer): void;
      setPoolable(poolable: Boolean): void;
      setQueryTimeout(seconds: Integer): void;
    }

  }
}

declare var Jdbc: GoogleAppsScript.JDBC.Jdbc;